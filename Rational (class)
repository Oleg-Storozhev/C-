/* What to do

I created a class of fractions which is reduced and the program also understands which fraction is more or less (this makes it possible to use map and set). 
You can also add, negate, multiply and divite two fractions(after the operation fraction whould be reduced). It is possible to write fractions "Naturally" using operator overloading.
If numerator and determinator is negative, programm will understand this and fraction will be positive. Also if the determinator negative and the numerator is positive the fraction will be negative.
If numerator is 0. Fraction will be 0/1. If you don't write anything the fraction will be 0/1 too (standart fraction).

*/

#include <iostream>
#include <sstream> 
#include <set> 
#include <map>
#include <vector> 
using namespace std;

int GCD(int a, int b) {
	a = abs(a);
	b = abs(b);
	while (a > 0 && b > 0) {
		if (a > b) {
			a %= b;
		}
		else {
			b %= a;
		}
	}
	return a + b;
}

int GCM(int a, int b) {
	return ((a * b) / GCD(a, b));
}

class Rational {
public:
	Rational() {
		num = 0;
		det = 1;
	}
	Rational(int numerator, int denominator) {
		if (numerator == 0) {
			num = 0;
			det = 1;
		}
		else {
			if ((denominator  < 0 && numerator > 0) || (denominator < 0 && numerator < 0)) {
				numerator *= -1;
				denominator *= -1;
			}
			int GCD_fac = GCD(numerator, denominator);
			det = denominator / GCD_fac;
			num = numerator / GCD_fac;
		}
	}
	friend istream& operator>> (istream &in, Rational &fraction);
	int setNumetator_and_determinator(int numerator, int denominator) {
		if (numerator == 0) {
			num = 0;
			det = 1;
		}
		else {
			if ((denominator < 0 && numerator > 0) || (denominator < 0 && numerator < 0)) {
				numerator *= -1;
				denominator *= -1;
			}
			int GCD_fac = GCD(numerator, denominator);
			det = denominator / GCD_fac;
			num = numerator / GCD_fac;
		}
	}
	int Numerator() const {
		return num;
	}
	int Denominator() const {
		return det;
	}
private:
	int num, det;
};

Rational operator+ (const Rational& l, const Rational& r) { // operation + from 2 fractions
	int GCM_fac = GCM(l.Denominator(), r.Denominator());
	int numerator_left = l.Numerator() * (GCM_fac / l.Denominator());
	int numerator_right = r.Numerator() * (GCM_fac / r.Denominator());
	return Rational(numerator_left + numerator_right, GCM_fac);
}

Rational operator- (const Rational& l, const Rational& r) { // operation - from 2 fractions
	int GCM_fac = GCM(l.Denominator(),r.Denominator());
	int numerator_left = l.Numerator() * (GCM_fac / l.Denominator());
	int numerator_right = r.Numerator() * (GCM_fac / r.Denominator());
	return Rational(numerator_left - numerator_right, GCM_fac);
}

Rational operator*(const Rational& l, const Rational& r) { // operation * from 2 fractions
	return Rational(l.Numerator() * r.Numerator(), l.Denominator() * r.Denominator());
}
Rational operator/(const Rational& l, const Rational& r) { // operation / from 2 fractions
	return Rational(l.Numerator() * r.Denominator(), l.Denominator() * r.Numerator());
}

bool operator== (const Rational& l, const Rational& r) { // operation == from 2 fractions
	return( (l.Numerator() == r.Numerator()) && (l.Denominator() == r.Denominator()) )? true : false;
}

ostream& operator<< (ostream& stream, const Rational& fraction) { // cout the fraction
	stream << fraction.Numerator() << "/" << fraction.Denominator();
	return stream;
}

istream& operator>> (istream& stream, Rational& fraction) { // cin the fraction
	stream >> fraction.num;
	stream.ignore(1);
	stream >> fraction.det;
	int GCD_frak = GCD(fraction.Numerator(), fraction.Denominator());
	fraction.num /= GCD_frak;
	fraction.det /= GCD_frak;
	return stream;
}

bool operator> (Rational a, Rational b) { // more (for using in map or set)
	return (a.Numerator() / (double)a.Denominator()) > double(b.Numerator() / (double)b.Denominator());
}
bool operator< (Rational a, Rational b) { // less (for using in map or set)
	return (a.Numerator() / (double)a.Denominator()) < (b.Numerator() / (double)b.Denominator());
}


int main() {
	   // Unit tests here
	return 0;
}
