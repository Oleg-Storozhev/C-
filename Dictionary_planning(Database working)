#include <iostream>
#include <iomanip>
#include <sstream>
#include <string>
#include <map>
#include <set>
using namespace std;

class Date {
public:
	Date(const int& new_year, const int& new_mounth, const int& new_day) {
		if (new_mounth < 1 || new_mounth > 12) {
			throw out_of_range("Month value is invalid: " + to_string(new_mounth));
		}
		if (new_day < 1 || new_day > 31) {
			throw out_of_range("Day value is invalid: " + to_string(new_day));
		}
		Year = new_year;
		Mounth = new_mounth;
		Day = new_day;
	}
	Date() {
		Year = 0;
		Mounth = 0;
		Day = 0;
	}
	int GetYear() const {
		return Year;
	}
	int GetMonth() const {
		return Mounth;
	}
	int GetDay() const {
		return Day;
	}

private:
	int Year;
	int Mounth;
	int Day;
};

bool operator < (const Date& lhs, const Date& rhs) {
	if (lhs.GetYear() != rhs.GetYear()) {
		return lhs.GetYear() < rhs.GetYear();
	}
	else if (lhs.GetMonth() != rhs.GetMonth()) {
		return lhs.GetMonth() < rhs.GetMonth();
	}
	return lhs.GetDay() < rhs.GetDay();
}

ostream& operator<< (ostream& stream, const Date& date) {
	stream << setfill('0') << setw(4) << to_string(date.GetYear());
	stream << "-";
	stream << setfill('0') << setw(2) << to_string(date.GetMonth());
	stream << "-";
	stream << setfill('0') << setw(2) << to_string(date.GetDay());
	return stream;
}

bool operator ==(const Date& lhs, const Date& rhs) {
	if ((lhs.GetYear() == rhs.GetYear()) && (lhs.GetMonth() == rhs.GetMonth()) && (lhs.GetDay() == rhs.GetDay())) {
		return true;
	}
	return false;
}

class Database {
public:
	void AddEvent(const Date& date, const string& event) {
		if (!event.empty()) {
			Date_event[date].insert(event);
		}
	}
	bool DeleteEvent(const Date& date, const string& event) {
		if (Date_event.count(date) > 0 && Date_event[date].count(event) > 0) {
			Date_event[date].erase(event);
			return true;
		}
		return false;
	}
	int  DeleteDate(const Date& date) {
		int count = 0;
		if (Date_event.count(date) > 0) {
			count = Date_event.at(date).size();
			Date_event.erase(date);
		}
		return count;
	}

	void Find(const Date& date) const {
		for (auto i : Date_event) {
			if (i.first == date) {
				for (auto u : i.second) {
					cout << u << endl;
				}
			}
		}
	}

	void Print() const {
		for (auto i : Date_event) {
			for (auto u : i.second) {
				cout << i.first << " " << u << endl;
			}
		}
	}

private:
	map <Date, set<string>> Date_event;
};

Date CinDate(const string& date) {
	istringstream stream(date);
	int Year, Month, Day;
	bool check = true;
	check = (check && (stream >> Year));
	check = (check && (stream.peek() == '-'));
	stream.ignore(1);
	check = (check && (stream >> Month));
	check = (check && (stream.peek() == '-'));
	stream.ignore(1);
	check = (check && (stream >> Day));
	check = (check && stream.eof());
	if (check == false) {
		throw logic_error("Wrong date format: " + date);
	}
	return Date(Year, Month, Day);
}

int main() {
	try {
		Database db;

		string command;
		while (getline(cin, command)) {
			if (command == "")
				continue;

			stringstream input(command);
			string task;
			input >> task;

			if (task == "Add") {
				string date_str, event;
				input >> date_str >> event;
				Date date = CinDate(date_str);
				db.AddEvent(date, event);
			}
			else if (task == "Del") {
				string date_str, event;
				input >> date_str;
				if (!input.eof()) {
					input >> event;
				}
				Date date = CinDate(date_str);
				if (event.empty()) {
					int N = db.DeleteDate(date);
					cout << "Deleted " << N << " events" << endl;
				}
				else {
					if (db.DeleteEvent(date, event)) {
						cout << "Deleted successfully" << endl;
					}
					else {
						cout << "Event not found" << endl;
					}
				}
			}
			else if (task == "Find") {
				string date_str;
				input >> date_str;
				Date date = CinDate(date_str);
				db.Find(date);
			}
			else if (task == "Print") {
				db.Print();
			}
			else {
				cout << "Unknown command: " << command << endl;
			}
		}
	}
	catch (exception& s) {
		cout << s.what() << endl;
		return 0;
	}
	return 0;
}
